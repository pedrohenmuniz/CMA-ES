# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_utils')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_utils')
    _utils = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utils', [dirname(__file__)])
        except ImportError:
            import _utils
            return _utils
        try:
            _mod = imp.load_module('_utils', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _utils = swig_import_helper()
    del swig_import_helper
else:
    import _utils
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_doubleArray(nelements):
    return _utils.new_doubleArray(nelements)
new_doubleArray = _utils.new_doubleArray

def delete_doubleArray(ary):
    return _utils.delete_doubleArray(ary)
delete_doubleArray = _utils.delete_doubleArray

def doubleArray_getitem(ary, index):
    return _utils.doubleArray_getitem(ary, index)
doubleArray_getitem = _utils.doubleArray_getitem

def doubleArray_setitem(ary, index, value):
    return _utils.doubleArray_setitem(ary, index, value)
doubleArray_setitem = _utils.doubleArray_setitem

def new_longDoubleArray(nelements):
    return _utils.new_longDoubleArray(nelements)
new_longDoubleArray = _utils.new_longDoubleArray

def delete_longDoubleArray(ary):
    return _utils.delete_longDoubleArray(ary)
delete_longDoubleArray = _utils.delete_longDoubleArray

def longDoubleArray_getitem(ary, index):
    return _utils.longDoubleArray_getitem(ary, index)
longDoubleArray_getitem = _utils.longDoubleArray_getitem

def longDoubleArray_setitem(ary, index, value):
    return _utils.longDoubleArray_setitem(ary, index, value)
longDoubleArray_setitem = _utils.longDoubleArray_setitem

def new_doubleddArray(rows):
    return _utils.new_doubleddArray(rows)
new_doubleddArray = _utils.new_doubleddArray

def castToDouble(b):
    return _utils.castToDouble(b)
castToDouble = _utils.castToDouble

def delete_doubleddArray(arr, rows, cols):
    return _utils.delete_doubleddArray(arr, rows, cols)
delete_doubleddArray = _utils.delete_doubleddArray

def doubleddArray_setitem(array, row, col, value):
    return _utils.doubleddArray_setitem(array, row, col, value)
doubleddArray_setitem = _utils.doubleddArray_setitem

def doubleddArray_getitem(array, row, col):
    return _utils.doubleddArray_getitem(array, row, col)
doubleddArray_getitem = _utils.doubleddArray_getitem

def printDoubleArray(array, size):
    return _utils.printDoubleArray(array, size)
printDoubleArray = _utils.printDoubleArray

def printLongDoubleArray(array, size):
    return _utils.printLongDoubleArray(array, size)
printLongDoubleArray = _utils.printLongDoubleArray
# This file is compatible with both classic and new-style classes.


