# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_eureka')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_eureka')
    _eureka = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eureka', [dirname(__file__)])
        except ImportError:
            import _eureka
            return _eureka
        try:
            _mod = imp.load_module('_eureka', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _eureka = swig_import_helper()
    del swig_import_helper
else:
    import _eureka
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Problem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Problem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Problem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eureka.delete_Problem
    __del__ = lambda self: None

    def evaluate(self, vector, values):
        return _eureka.Problem_evaluate(self, vector, values)

    def getNumberObjectiveFunctionEvaluations(self):
        return _eureka.Problem_getNumberObjectiveFunctionEvaluations(self)

    def getMaxNumberObjectiveFunctionEvaluations(self):
        return _eureka.Problem_getMaxNumberObjectiveFunctionEvaluations(self)

    def getBounds(self):
        return _eureka.Problem_getBounds(self)

    def getNumberObjectives(self):
        return _eureka.Problem_getNumberObjectives(self)

    def getNumberConstraints(self):
        return _eureka.Problem_getNumberConstraints(self)

    def getDimension(self):
        return _eureka.Problem_getDimension(self)

    def toString(self):
        return _eureka.Problem_toString(self)
Problem_swigregister = _eureka.Problem_swigregister
Problem_swigregister(Problem)

class TrussBarStructureStaticProblem(Problem):
    __swig_setmethods__ = {}
    for _s in [Problem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrussBarStructureStaticProblem, name, value)
    __swig_getmethods__ = {}
    for _s in [Problem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrussBarStructureStaticProblem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _eureka.new_TrussBarStructureStaticProblem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _eureka.delete_TrussBarStructureStaticProblem
    __del__ = lambda self: None

    def evaluation(self, vector, values):
        return _eureka.TrussBarStructureStaticProblem_evaluation(self, vector, values)

    def getNumberOfBars(self):
        return _eureka.TrussBarStructureStaticProblem_getNumberOfBars(self)

    def getNLCase(self):
        return _eureka.TrussBarStructureStaticProblem_getNLCase(self)

    def getDisplacementConstraint(self):
        return _eureka.TrussBarStructureStaticProblem_getDisplacementConstraint(self)
TrussBarStructureStaticProblem_swigregister = _eureka.TrussBarStructureStaticProblem_swigregister
TrussBarStructureStaticProblem_swigregister(TrussBarStructureStaticProblem)

class F101Truss10Bar(TrussBarStructureStaticProblem):
    __swig_setmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, F101Truss10Bar, name, value)
    __swig_getmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, F101Truss10Bar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _eureka.new_F101Truss10Bar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _eureka.delete_F101Truss10Bar
    __del__ = lambda self: None
F101Truss10Bar_swigregister = _eureka.F101Truss10Bar_swigregister
F101Truss10Bar_swigregister(F101Truss10Bar)

class F103Truss25Bar(TrussBarStructureStaticProblem):
    __swig_setmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, F103Truss25Bar, name, value)
    __swig_getmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, F103Truss25Bar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _eureka.new_F103Truss25Bar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _eureka.delete_F103Truss25Bar
    __del__ = lambda self: None

    def evaluation(self, vector, values):
        return _eureka.F103Truss25Bar_evaluation(self, vector, values)
F103Truss25Bar_swigregister = _eureka.F103Truss25Bar_swigregister
F103Truss25Bar_swigregister(F103Truss25Bar)

class F105Truss60Bar(TrussBarStructureStaticProblem):
    __swig_setmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, F105Truss60Bar, name, value)
    __swig_getmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, F105Truss60Bar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _eureka.new_F105Truss60Bar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _eureka.delete_F105Truss60Bar
    __del__ = lambda self: None

    def evaluation(self, vector, values):
        return _eureka.F105Truss60Bar_evaluation(self, vector, values)
F105Truss60Bar_swigregister = _eureka.F105Truss60Bar_swigregister
F105Truss60Bar_swigregister(F105Truss60Bar)

class F107Truss72Bar(TrussBarStructureStaticProblem):
    __swig_setmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, F107Truss72Bar, name, value)
    __swig_getmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, F107Truss72Bar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _eureka.new_F107Truss72Bar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _eureka.delete_F107Truss72Bar
    __del__ = lambda self: None

    def evaluation(self, vector, values):
        return _eureka.F107Truss72Bar_evaluation(self, vector, values)
F107Truss72Bar_swigregister = _eureka.F107Truss72Bar_swigregister
F107Truss72Bar_swigregister(F107Truss72Bar)

class F109Truss942Bar(TrussBarStructureStaticProblem):
    __swig_setmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, F109Truss942Bar, name, value)
    __swig_getmethods__ = {}
    for _s in [TrussBarStructureStaticProblem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, F109Truss942Bar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _eureka.new_F109Truss942Bar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _eureka.delete_F109Truss942Bar
    __del__ = lambda self: None
F109Truss942Bar_swigregister = _eureka.F109Truss942Bar_swigregister
F109Truss942Bar_swigregister(F109Truss942Bar)

# This file is compatible with both classic and new-style classes.


